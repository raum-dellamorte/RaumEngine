#version 140 core

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 toCamVec;
in vec3 fromLightVector[4];

out vec4 out_Color;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;

uniform vec3 lightColour[4];
uniform vec3 attenuation[4];

uniform float moveFactor;

const float shineDamper = 20.0;
const float reflectivity = 0.6;
const float waveStrength = 0.02;
const float refractStrength = 0.7;

void main(void) {

  vec2 refractTxtrCoords = (clipSpace.xy/clipSpace.w)/2.0 + 0.5;
  vec2 reflectTxtrCoords = vec2(refractTxtrCoords.x, -refractTxtrCoords.y);

  vec2 distortedTexCoords = texture(dudvMap, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg*0.1;
  distortedTexCoords = textureCoords + vec2(distortedTexCoords.x, distortedTexCoords.y+moveFactor);
  vec2 distort = (texture(dudvMap, distortedTexCoords).rg * 2.0 - 1.0) * waveStrength;

  refractTxtrCoords += distort;
  refractTxtrCoords = clamp(refractTxtrCoords, 0.001, 0.999);

  reflectTxtrCoords += distort;
  reflectTxtrCoords.x = clamp(reflectTxtrCoords.x, 0.001, 0.999);
  reflectTxtrCoords.y = clamp(reflectTxtrCoords.y, -0.999, -0.001);

  vec4 reflectColour = texture(reflectionTexture, reflectTxtrCoords);
  vec4 refractColour = texture(refractionTexture, refractTxtrCoords);

  vec3 viewVec = normalize(toCamVec);
  float refractFactor = pow(dot(viewVec, vec3(0.0, 1.0, 0.0)), refractStrength);

  vec4 normalMapColour = texture(normalMap, distortedTexCoords);
  vec3 normal = vec3(normalMapColour.r * 2.0 - 1.0, normalMapColour.b, normalMapColour.g * 2.0 - 1.0);
  normal = normalize(normal);
  
  vec3 specularHighlights = vec3(0.0);
  
  for(int i = 0; i < 4; i++){
    float distance = length(-fromLightVector[i]);
    float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
    vec3 reflectedLight = reflect(normalize(fromLightVector[i]), normal);
    float specular = max(dot(reflectedLight, viewVec), 0.0);
    specular = pow(specular, shineDamper);
    specularHighlights = specularHighlights + (lightColour[i] * specular * reflectivity) / attFactor;
  }

  out_Color = mix(reflectColour, refractColour, refractFactor);
  out_Color = mix(out_Color, vec4(0.0, 0.1, 0.5, 1.0), 0.14) + vec4(specularHighlights, 0.0);
}